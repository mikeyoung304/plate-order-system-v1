# State Management Standards for Clean Code

> From [CodingRules.ai](https://codingrules.ai/rules/state-management-standards-for-clean-code)

**Tags:** Clean Code

---

# State Management Standards for Clean Code

This document outlines coding standards for state management within Clean Code principles. It provides specific guidelines and examples to ensure code related to state is maintainable, readable, performant, and secure. These standards are designed to work with the latest recommended practices and features within the Clean Code ecosystem.

## 1. Principles of Clean State Management

Clean state management is about structuring your application's data in a way that's predictable, manageable, and testable. It involves making state changes explicit, limiting side effects, and ensuring data consistency. Applying clean code principles to state enhances maintainability, reduces bugs, and improves collaborative development.

* **Single Source of Truth:** Ensure each piece of data has one authoritative source. This prevents inconsistencies and simplifies debugging.
* **Immutability:** Favor immutable data structures. Immutable data makes state changes more predictable and helps prevent unintended side effects.
* **Explicit State Transitions:** State transitions should be clear and well-defined, making it easier to understand how the application evolves over time.
* **Separation of Concerns:** Keep state management logic separate from UI components or business logic. This enhances modularity and testability.
* **Minimal Global State:** Limit the use of global state. Widespread global state can make it difficult to track dependencies and lead to unexpected behavior.

## 2. Architectural Patterns for State Management

Choosing the right architecture for state management depends on the complexity of the application. Here are a few common patterns and guidelines:

### 2.1 Local State

Managing state within a single component should be a default option. You typically use local state for isolated functionalities that don't necessitate sharing state or reactivity beyond the componentâ€™s scope.

* **Do This:** Use local state for isolated component features.
* **Don't Do This:** Share local state directly between unrelated components.

"""javascript
// Example React local state using useState
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
"""

### 2.2 Redux Pattern (Centralized State)

The Redux pattern emphasizes a single store for application state, using reducers to handle actions and state transitions immutably.

* **Do This:**
    * Use Redux or similar libraries for complex, application-wide state.
    * Define actions as plain objects with a "type" field.
    * Use pure functions as reducers to ensure predictable state transitions.
    * Selectors should cache results to prevent unnecessary re-renders.
* **Don't Do This:**
    * Mutate the state directly in reducers.
    * Perform asynchronous operations directly in reducers.
    * Overuse Redux for simple components with minimal state.

"""javascript
// Example Redux setup
// Action
const INCREMENT = 'INCREMENT';
const DECREMENT = 'DECREMENT';

const increment = () => ({ type: INCREMENT });
const decrement = () => ({ type: DECREMENT });

// Reducer
const initialState = { count: 0 };

const counterReducer = (state = initialState, action) => {
  switch (action.type) {
    case INCREMENT:
      return { ...state, count: state.count + 1 };
    case DECREMENT:
      return { ...state, count: state.count - 1 };
    default:
      return state;
  }
};

// Store creation
import { createStore } from 'redux';
const store = createStore(counterReducer);

// Component integration (React example)
import { useSelector, useDispatch } from 'react-redux';

function CounterComponent() {
  const count = useSelector(state => state.count);
  const dispatch = useDispatch();

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => dispatch(increment())}>Increment</button>
      <button onClick={() => dispatch(decrement())}>Decrement</button>
    </div>
  );
}
"""

### 2.3 Context API (Scoped State)

Context API provides a way to pass data through the component tree without having to pass props manually at every level.  While it is simpler than Redux it is still intended for scenarios that benefit from shared state.

* **Do This:**
    * Use Context API for theming, user authentication, or other application-wide configurations.
    * Use "useContext" hook to consume context values.
    * Combine Context API with "useReducer" for complex state logic.

* **Don't Do This:**
    * Use Context API as a general replacement for prop drilling in scenarios where component composition is better suited.
    * Overuse Context API resulting in unnecessary re-renders.

"""javascript
// Example Context API setup
import React, { createContext, useContext, useState } from 'react';

// Create Context
const ThemeContext = createContext();

// Context Provider
function ThemeProvider({ children }) {
  const [theme, setTheme] = useState('light');

  const toggleTheme = () => {
    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

// Custom Hook to consume Context
function useTheme() {
  return useContext(ThemeContext);
}

// Component using Context
function ThemeToggler() {
  const { theme, toggleTheme } = useTheme();

  return (
    <button onClick={toggleTheme}>
      Toggle Theme (Current: {theme})
    </button>
  );
}

// Usage in App
function App() {
  return (
    <ThemeProvider>
      <div>
        <ThemeToggler />
      </div>
    </ThemeProvider>
  );
}
"""

### 2.4 Observable Pattern (Reactive State)

The observable pattern, often implemented with libraries like RxJS, is used for handling asynchronous data streams and complex event-driven applications.

* **Do This:**
    * Use RxJS or similar libraries for handling asynchronous data streams.
    * Structure application logic as a pipeline of observable transformations.
    * Use subjects to bridge different parts of the application.
* **Don't Do This:**
    * Overuse RxJS for simple event handling.
    * Introduce memory leaks by not unsubscribing from observables.
    * Create overly complex observable chains that are hard to understand.

"""javascript
// Example RxJS setup
import { fromEvent, interval } from 'rxjs';
import { map, filter, scan, takeUntil } from 'rxjs/operators';

// Example: Click counter observable
const button = document.getElementById('myButton');
const click$ = fromEvent(button, 'click');

const counter$ = click$.pipe(
  map(() => 1),
  scan((acc, value) => acc + value, 0)
);

counter$.subscribe(count => {
  console.log("Button clicked ${count} times");
});

// Example: Auto-incrementing counter that stops after 5 seconds
const interval$ = interval(1000);
const stop$ = fromEvent(document.getElementById('stopButton'), 'click');

interval$.pipe(
  takeUntil(stop$) // Stop the interval when the stop button is clicked
).subscribe(val => console.log("Interval value: ${val}"));
"""

### 2.5 State Machines

State machines are useful for managing complex state transitions with clearly defined states and transitions.

* **Do This:**
    * Use state machines for scenarios with clearly defined states and transitions.
    * Model state transitions explicitly, reducing possible unexpected states.
    * Ensure state machines are well-documented, especially for complex systems.
* **Don't Do This:**
    * Overuse state machines for simple state management.
    * Create monolithic state machines that are difficult to understand.

"""javascript
// Example: JavaScript state machine using XState
import { createMachine, interpret } from 'xstate';

// Define the state machine
const trafficLightMachine = createMachine({
  id: 'trafficLight',
  initial: 'green',
  states: {
    green: {
      after: {
        5000: 'yellow' // After 5 seconds, transition to yellow
      }
    },
    yellow: {
      after: {
        1000: 'red' // After 1 second, transition to red
      }
    },
    red: {
      after: {
        6000: 'green' // After 6 seconds, transition to green
      }
    }
  }
});

// Interpret the state machine
const trafficService = interpret(trafficLightMachine).start();

trafficService.onTransition(state => {
  console.log("Traffic light is now ${state.value}");
});

// Example usage (simulating events or external triggers)
// trafficService.send('TIMER');
"""

## 3. Implementing Immutability

Immutability ensures that once an object is created, its state cannot be changed. This helps prevent accidental state mutations, making it easier to track and manage state changes, which aids in debugging and improves performance in certain scenarios.

* **Do This:**
    * Use immutable data structures and operations.
    * Make copies of objects or arrays before modifying them.
    * Employ libraries like Immutable.js for more complex scenarios.

* **Don't Do This:**
    * Directly modify object properties or array elements.
    * Assume that passing an object or array creates a new copy.

### 3.1 JavaScript Immutability Techniques

"""javascript
// Immutable Object Update
const originalObject = { name: 'John', age: 30 };
const updatedObject = { ...originalObject, age: 31 }; // Create a new object

// Immutable Array Update
const originalArray = [1, 2, 3];
const updatedArray = [...originalArray, 4]; // Create a new array
const removedArray = originalArray.filter(item => item !== 2); // Create new array without '2'

console.log(originalObject); // { name: 'John', age: 30 }
console.log(updatedObject);  // { name: 'John', age: 31 }

console.log(originalArray); // [1, 2, 3]
console.log(updatedArray);  // [1, 2, 3, 4]
console.log(removedArray);  // [1, 3]
"""

### 3.2 Immutable.js

Immutable.js provides persistent immutable data structures, improving performance and simplifying state management for complex applications.

"""javascript
import { Map, List } from 'immutable';

// Immutable Map
const originalMap = Map({ name: 'John', age: 30 });
const updatedMap = originalMap.set('age', 31);

// Immutable List
const originalList = List([1, 2, 3]);
const updatedList = originalList.push(4);

console.log(originalMap.toJS()); // { name: 'John', age: 30 }
console.log(updatedMap.toJS());  // { name: 'John', age: 31 }

console.log(originalList.toJS()); // [1, 2, 3]
console.log(updatedList.toJS());  // [1, 2, 3, 4]
"""

## 4. Handling Side Effects

Side effects are operations that affect the state of the application outside of the current function or component. Properly managing side effects is crucial for maintaining predictable and testable code.

* **Do This:**
    * Isolate side effects in dedicated functions or modules.
    * Use effect hooks (e.g., "useEffect" in React) to manage side effects in components.
    * Handle errors gracefully when performing side effects.

* **Don't Do This:**
    * Perform side effects directly within reducers or pure functions.
    * Ignore potential errors in side effect operations.

### 4.1 Managing Effects with "useEffect"

"""javascript
import React, { useState, useEffect } from 'react';

function DataFetcher({ url }) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error("HTTP error! status: ${response.status}");
        }
        const result = await response.json();
        setData(result);
      } catch (e) {
        setError(e);
      } finally {
        setLoading(false);
      }
    };

    fetchData();

    // Cleanup function (optional)
    return () => {
      // Cancel any pending requests or subscriptions
    };
  }, [url]); // Dependency array: effect runs only when 'url' changes

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error.message}</p>;
  if (!data) return <p>No data available.</p>;

  return (
    <pre>{JSON.stringify(data, null, 2)}</pre>
  );
}
"""

### 4.2 Using Thunks with Redux

Thunks allow you to perform asynchronous operations in Redux actions.

"""javascript
// Example Redux Thunk Action
const fetchDataRequest = () => ({ type: 'FETCH_DATA_REQUEST' });
const fetchDataSuccess = (data) => ({ type: 'FETCH_DATA_SUCCESS', payload: data });
const fetchDataFailure = (error) => ({ type: 'FETCH_DATA_FAILURE', payload: error });

// Async action using Redux Thunk
const fetchData = (url) => {
  return async (dispatch) => {
    dispatch(fetchDataRequest());
    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error("HTTP error! status: ${response.status}");
      }
      const data = await response.json();
      dispatch(fetchDataSuccess(data));
    } catch (error) {
      dispatch(fetchDataFailure(error.message));
    }
  };
};

// Usage in Component
import { useDispatch } from 'react-redux';

function DataFetchButton({ url }) {
  const dispatch = useDispatch();

  return (
    <button onClick={() => dispatch(fetchData(url))}>
      Fetch Data
    </button>
  );
}
"""

## 5. Testing State Management

Testing state management involves verifying that state transitions occur correctly and that side effects are handled properly.

* **Do This:**
    * Write unit tests for reducers to verify state transitions.
    * Use mock stores and actions to test components connected to Redux.
    * Test side effects by mocking external dependencies.

* **Don't Do This:**
    * Omit testing for state management logic.
    * Write integration tests without proper unit testing.

### 5.1 Testing Reducers

"""javascript
// Reducer Test Example (Jest)
import counterReducer from './counterReducer'; // Assuming counterReducer.js
import { INCREMENT, DECREMENT } from './actions';

describe('counterReducer', () => {
  it('should return the initial state', () => {
    expect(counterReducer(undefined, {})).toEqual({ count: 0 });
  });

  it('should handle INCREMENT', () => {
    expect(counterReducer({ count: 0 }, { type: INCREMENT })).toEqual({ count: 1 });
  });

  it('should handle DECREMENT', () => {
    expect(counterReducer({ count: 1 }, { type: DECREMENT })).toEqual({ count: 0 });
  });
});
"""

### 5.2 Testing React Components with Redux

"""javascript
// Component Test Example (React Testing Library and Redux Mock Store)
import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import CounterComponent from './CounterComponent'; // Assuming CounterComponent.js

const mockStore = configureStore([]);

describe('CounterComponent', () => {
  let store;
  let component;

  beforeEach(() => {
    store = mockStore({ count: 0 });
    store.dispatch = jest.fn(); // Mock dispatch function

    component = render(
      <Provider store={store}>
        <CounterComponent />
      </Provider>
    );
  });

  it('should display the initial count', () => {
    expect(component.getByText('Count: 0')).toBeInTheDocument();
  });

  it('should dispatch increment action when increment button is clicked', () => {
    fireEvent.click(component.getByText('Increment'));
    expect(store.dispatch).toHaveBeenCalledWith({ type: 'INCREMENT' });
  });
});
"""

## 6. Security Considerations for State Management

Security is a critical aspect of state management. Properly securing the state ensures that sensitive data is protected from unauthorized access and tampering.

* **Do This:**
    * Protect sensitive data in the state with encryption.
    * Validate data received from external sources before storing it in the state.
    * Sanitize user input to prevent XSS.

* **Don't Do This:**
    * Store sensitive data in plain text in the state.
    * Trust data received from external sources without validation.
    * Expose sensitive data in logs or error messages.

### 6.1 Data Validation

"""javascript
// Example Data Validation
const validateData = (data) => {
  if (typeof data.email !== 'string' || !data.email.includes('@')) {
    throw new Error('Invalid email format');
  }
  if (typeof data.age !== 'number' || data.age < 0 || data.age > 120) {
    throw new Error('Invalid age');
  }
  return data;
};

// Usage in Reducer
const userReducer = (state = {}, action) => {
  switch (action.type) {
    case 'UPDATE_USER':
      try {
        const validatedData = validateData(action.payload);
        return { ...state, ...validatedData };
      } catch (error) {
        console.error('Data validation failed:', error.message);
        return state;
      }
    default:
      return state;
  }
};
"""

### 6.2 Encryption

Encrypting sensitive data ensures that even if the state is compromised, the data remains unreadable without the decryption key.

"""javascript
// Example Encryption (using CryptoJS)
import CryptoJS from 'crypto-js';

const encryptData = (data, key) => {
  const encrypted = CryptoJS.AES.encrypt(JSON.stringify(data), key).toString();
  return encrypted;
};

const decryptData = (encryptedData, key) => {
  const bytes = CryptoJS.AES.decrypt(encryptedData, key);
  try {
    const decrypted = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));
    return decrypted;
  } catch (e) {
    console.error("Decryption error", e);
    return null;  // Or handle the error as appropriate
  }
};

// Example usage
const sensitiveData = { creditCardNumber: '1234-5678-9012-3456' };
const encryptionKey = 'my-secret-key';

const encryptedData = encryptData(sensitiveData, encryptionKey);
console.log('Encrypted:', encryptedData);

const decryptedData = decryptData(encryptedData, encryptionKey);
console.log('Decrypted:', decryptedData);
"""

## 7. Optimizing Performance

Efficient state management is crucial for optimizing application performance, especially in complex applications with frequent state updates.

* **Do This:**
    * Use memoization techniques to prevent unnecessary re-renders.
    * Implement lazy loading for components that rely on large state objects.
    * Batch state updates to minimize the number of renders.

* **Don't Do This:**
    * Update the state unnecessarily.
    * Cause components to re-render frequently with negligible impact.

### 7.1 Memoization

Memoization prevents re-renders by caching the results of expensive calculations or component renders.

"""javascript
import React, { useState, useMemo } from 'react';

function ExpensiveComponent({ data }) {
  // Simulate an expensive computation
  const computedValue = useMemo(() => {
    console.log('Computing expensive value...');
    // Complex calculation based on data
    return data.map(item => item * 2).reduce((acc, val) => acc + val, 0);
  }, [data]); // Only recompute if 'data' changes

  return (
    <div>
      <p>Computed Value: {computedValue}</p>
    </div>
  );
}

function ParentComponent() {
  const [count, setCount] = useState(0);
  const data = [1, 2, 3, 4, 5]; // Static data

  return (
    <div>
      <button onClick={() => setCount(count + 1)}>Increment Count</button>
      <p>Count: {count}</p>
      {/*ExpensiveComponent only re-renders if "data" changes, not on count changes*/}
      <ExpensiveComponent data={data} />
    </div>
  );
}

function MemoizedComponent({ data }) {
  // Simulate a render-heavy component
  console.log('Rendering MemoizedComponent...');
  return <p>Data: {data.join(', ')}</p>;
}

// Memoize MemoizedComponent to prevent unnecessary re-renders
const OptimizedMemoizedComponent = React.memo(MemoizedComponent);

function ParentMemoComponent() {
    const [count, setCount] = useState(0);
    const data = [1, 2, 3, 4, 5];

    return (
        <div>
            <button onClick={() => setCount(count + 1)}>Increment Count</button>
            <p>Count: {count}</p>
            {/* MemoizedComponent only re-renders if its props change, not on count changes */}
            <OptimizedMemoizedComponent data={data} />
        </div>
    );
}

"""

### 7.2 Batching Updates

Batching updates ensures that multiple state updates are grouped into a single render cycle.

"""javascript
import React, { useState } from 'react';
import { unstable_batchedUpdates } from 'react-dom'; // Available only in some React versions

function BatchUpdatesComponent() {
  const [count1, setCount1] = useState(0);
  const [count2, setCount2] = useState(0);

  const updateBothCounts = () => {
    unstable_batchedUpdates(() => {
      // Both state updates are batched into a single render
      setCount1(prevCount => prevCount + 1);
      setCount2(prevCount => prevCount + 1);
    });
  };

  return (
    <div>
      <p>Count 1: {count1}</p>
      <p>Count 2: {count2}</p>
      <button onClick={updateBothCounts}>Update Both Counts</button>
    </div>
  );
}
"""

These standards provide a comprehensive guide to managing state in a clean and maintainable way. By following these guidelines, developers can build robust, performant, and secure applications.
